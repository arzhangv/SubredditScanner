{"data": [{"author": "mylifettg", "author_created_utc": 1542596648, "author_flair_background_color": null, "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_template_id": null, "author_flair_text": null, "author_flair_text_color": null, "author_flair_type": "text", "author_fullname": "t2_2mk9iuo9", "author_patreon_flair": false, "body": "I know this is completely off topic, but I download an apk mod app, scanned it and two files come up: VIRUSSHARE with a bunch of numbers following it. Any ideas?", "can_gild": true, "can_mod_post": false, "collapsed": false, "collapsed_reason": null, "controversiality": 0, "created_utc": 1551160904, "distinguished": null, "edited": false, "gilded": 0, "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "id": "ehayajl", "is_submitter": false, "link_id": "t3_9fwyef", "no_follow": true, "parent_id": null, "permalink": "/r/Malware/comments/9fwyef/virussharecom_some_problems/ehayajl/", "quarantined": false, "removal_reason": null, "score": 1, "send_replies": true, "stickied": false, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "subreddit_name_prefixed": "r/Malware", "subreddit_type": "public", "retrieved_utc": 1555049808, "updated_utc": 1670713951, "body_sha1": "afdfd7b752fe5c110e7fee66e901032fd3e75d70", "nest_level": 1, "utc_datetime_str": "2019-02-26 06:01:44"}, {"author": "neos300", "author_created_utc": 1306675483, "author_flair_background_color": null, "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_template_id": null, "author_flair_text": null, "author_flair_text_color": null, "author_flair_type": "text", "author_fullname": "t2_5avu0", "author_patreon_flair": false, "body": "No, most of these are legitimate obfuscation techniques. For informative purposes, here's what they are:\n\n1. Register swap: This might mean a few different things, but generally this is something like Find-Replace eax with ebx. Or in more advanced forms is using a register other than esp as the stack pointer (which requires replacing all the push/call/etc instructions with replacements). This is generally pretty easy to replace yourself with a script, or you can just read it as is (generally this isn't that hard to read). It does break hex-rays though.\n\n2. Sub routine reordering: Due to how the linker works, most statically linked functions from the same library will be in one contiguous area of memory, and some analysis tools (probably not so much now days) relied on this for library function identification. Reordering the functions would break those tools. Not really a problem today.\n\n3. Dead code insertion: This is inserting junk instructions between other instructions that either have no effect at all (nop), or their effect is ultimately meaningless to the overall function of the program. IDA will still disassemble and display these instructions, it's not that smart on it's own (hex-rays can sometimes deal with this however).\n\n4. Instruction substitution: He's probably talking about a much simpler case than movfuscator (see https://github.com/a0rtega/metame for an example). Stuff like translating `mov edi, eax` into `push eax; pop edi`.  Tends to break hex-rays, but again isn't much of a pain to just read the assembly.\n\n5. Transposition of independent code: Not quite sure what this is either. Potentially might mean shuffling the basic blocks around (so that functions aren't contiguous) but IDA/Binja/etc all deal with that fine these days.", "can_gild": true, "can_mod_post": false, "collapsed": false, "collapsed_reason": null, "controversiality": 0, "created_utc": 1551136994, "distinguished": null, "edited": false, "gilded": 0, "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "id": "eha53lk", "is_submitter": false, "link_id": "t3_aukzuf", "no_follow": true, "parent_id": 31517661476, "permalink": "/r/Malware/comments/aukzuf/malware_deobfuscation_technique/eha53lk/", "quarantined": false, "removal_reason": null, "score": 3, "send_replies": true, "stickied": false, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "subreddit_name_prefixed": "r/Malware", "subreddit_type": "public", "retrieved_utc": 1555000699, "updated_utc": 1670713904, "body_sha1": "3ea3541f15e3ae2aa4d19819f4a70c490ec81686", "utc_datetime_str": "2019-02-25 23:23:14"}, {"author": "mavbric", "author_created_utc": 1352752600, "author_flair_background_color": null, "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_template_id": null, "author_flair_text": null, "author_flair_text_color": null, "author_flair_type": "text", "author_fullname": "t2_9l14b", "author_patreon_flair": false, "body": "Control flow flattening, bogus code insertion, and polymorphic code are all other obfuscation techniques. \n\nAs far as I know, there are no programs out there for deleting bogus code. I believe that's an NP-Complete problem. You might have to do it manually which can be time consuming, but usually heavy obfuscation is not used because it can slow down runtime.", "can_gild": true, "can_mod_post": false, "collapsed": false, "collapsed_reason": null, "controversiality": 0, "created_utc": 1551116372, "distinguished": null, "edited": false, "gilded": 0, "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "id": "eh9a07i", "is_submitter": false, "link_id": "t3_aukzuf", "no_follow": true, "parent_id": null, "permalink": "/r/Malware/comments/aukzuf/malware_deobfuscation_technique/eh9a07i/", "quarantined": false, "removal_reason": null, "score": 2, "send_replies": true, "stickied": false, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "subreddit_name_prefixed": "r/Malware", "subreddit_type": "public", "retrieved_utc": 1554986191, "updated_utc": 1670713855, "body_sha1": "68d3fbe23f5abdb5e5499683e90b429af9a8a475", "nest_level": 1, "utc_datetime_str": "2019-02-25 17:39:32"}, {"author": "OnkelDanny", "author_created_utc": 1376346313, "author_flair_background_color": null, "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_template_id": null, "author_flair_text": null, "author_flair_text_color": null, "author_flair_type": "text", "author_fullname": "t2_cqfkm", "author_patreon_flair": false, "body": "1. I think one of the key strategies for obfuscation that you are missing is virtualization. I can strongly recommend  the book Practical Malware Analysis,  for this topic (obfuscation in general, not just virtualization).\n2. I am not sure what answer you are looking for here. The short one is \"yes\" :) The field of program analysis has some answers on how to do some of this.", "can_gild": true, "can_mod_post": false, "collapsed": false, "collapsed_reason": null, "controversiality": 0, "created_utc": 1551109478, "distinguished": null, "edited": false, "gilded": 0, "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "id": "eh90bxa", "is_submitter": false, "link_id": "t3_aukzuf", "no_follow": true, "parent_id": null, "permalink": "/r/Malware/comments/aukzuf/malware_deobfuscation_technique/eh90bxa/", "quarantined": false, "removal_reason": null, "score": 6, "send_replies": true, "stickied": false, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "subreddit_name_prefixed": "r/Malware", "subreddit_type": "public", "retrieved_utc": 1554981690, "updated_utc": 1670713839, "body_sha1": "d6391fcb24a45bcbd5ced592f9ad0b722efeb124", "nest_level": 1, "utc_datetime_str": "2019-02-25 15:44:38"}, {"author": "ixgraham", "author_created_utc": 1485265615, "author_flair_background_color": null, "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_template_id": null, "author_flair_text": null, "author_flair_text_color": null, "author_flair_type": "text", "author_fullname": "t2_14qhdo", "author_patreon_flair": false, "body": "I\u2019ve seen a few reports that have mentioned these techniques which I believe has spawned from one research paper. when we talk about obfuscation within malware I think of packers, crypters (encryption), polymorphism, metamorphic etc. Different methods of making static analysis hard for analysts! ", "can_gild": true, "can_mod_post": false, "collapsed": false, "collapsed_reason": null, "controversiality": 0, "created_utc": 1551104965, "distinguished": null, "edited": false, "gilded": 0, "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "id": "eh8uryo", "is_submitter": false, "link_id": "t3_aukzuf", "no_follow": true, "parent_id": null, "permalink": "/r/Malware/comments/aukzuf/malware_deobfuscation_technique/eh8uryo/", "quarantined": false, "removal_reason": null, "score": 1, "send_replies": true, "stickied": false, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "subreddit_name_prefixed": "r/Malware", "subreddit_type": "public", "retrieved_utc": 1554979076, "updated_utc": 1670713830, "body_sha1": "ef233f612282c9488dbf3e1a49733816ad2cc9b9", "nest_level": 1, "utc_datetime_str": "2019-02-25 14:29:25"}, {"author": "specter800", "author_created_utc": 1297094768, "author_flair_background_color": null, "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_template_id": null, "author_flair_text": null, "author_flair_text_color": null, "author_flair_type": "text", "author_fullname": "t2_4td9x", "author_patreon_flair": false, "body": "I'm not sure what you're reading but some of those don't seem like obfuscation to me?\n\n1. Idk what this is, I've never heard of it.\n2. I'm guessing at your meaning but reordering happens anyway in compilation so nothing is ever \"in order\" to start with in analysis.\n3. If something really is not used, a recursive disassembler like IDA probably won't even mark it as code or at the very least it will be a chunk of code with no references.\n4. If you're talking about something like [movfuscator](https://github.com/xoreaxeaxeax/movfuscator), where you take relatively simple operations and turn them into really obtuse instructions that eventually yield the same result, yeah that really sucks but shouldn't be that hard to detect.\n5. I'm not sure what this is again.\n\nYou're missing things like custom VM's that have proprietary instructions they process. Packers like Themida and VMprotect implement this kind of protection.\n\nThere's lots of ways to counter obfuscation but you need to know specifically what you're dealing with to get started.", "can_gild": true, "can_mod_post": false, "collapsed": false, "collapsed_reason": null, "controversiality": 0, "created_utc": 1551103215, "distinguished": null, "edited": false, "gilded": 0, "gildings": {"gid_1": 0, "gid_2": 0, "gid_3": 0}, "id": "eh8sv8k", "is_submitter": false, "link_id": "t3_aukzuf", "no_follow": true, "parent_id": null, "permalink": "/r/Malware/comments/aukzuf/malware_deobfuscation_technique/eh8sv8k/", "quarantined": false, "removal_reason": null, "score": 1, "send_replies": true, "stickied": false, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "subreddit_name_prefixed": "r/Malware", "subreddit_type": "public", "retrieved_utc": 1554978209, "updated_utc": 1670713827, "body_sha1": "d9233088bb62453bace9034079e91b034b330592", "nest_level": 1, "utc_datetime_str": "2019-02-25 14:00:15"}], "error": null, "metadata": {"es": {"took": 155, "timed_out": false, "_shards": {"total": 824, "successful": 824, "skipped": 820, "failed": 0}, "hits": {"total": {"value": 6, "relation": "eq"}, "max_score": null}}, "es_query": {"size": 10, "query": {"bool": {"must": [{"bool": {"must": [{"range": {"created_utc": {"gte": 1551081660000}}}, {"range": {"created_utc": {"lt": 1551168060000}}}]}}, {"bool": {"should": [{"match": {"subreddit": "malware"}}], "minimum_should_match": 1}}]}}, "aggs": {}, "sort": {"created_utc": "desc"}}, "es_query2": "{\"size\":10,\"query\":{\"bool\":{\"must\":[{\"bool\":{\"must\":[{\"range\":{\"created_utc\":{\"gte\":1551081660000}}},{\"range\":{\"created_utc\":{\"lt\":1551168060000}}}]}},{\"bool\":{\"should\":[{\"match\":{\"subreddit\":\"malware\"}}],\"minimum_should_match\":1}}]}},\"aggs\":{},\"sort\":{\"created_utc\":\"desc\"}}", "api_launch_time": 1673945683.810305, "api_request_start": 1674108437.9974792, "api_request_end": 1674108438.2616086, "api_total_time": 0.2641294002532959}}