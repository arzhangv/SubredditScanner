{"data": [{"score": 1, "downs": 0, "author": "[deleted]", "author_flair_css_class": null, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "body": "[deleted]", "score_hidden": false, "edited": false, "controversiality": 0, "ups": 1, "distinguished": null, "author_flair_text": null, "archived": true, "created_utc": 1402542143, "removal_reason": null, "id": "ci5do4q", "gilded": 0, "parent_id": null, "link_id": "t3_27ut48", "retrieved_utc": 1434201404, "updated_utc": 1668794487, "body_sha1": "228f7d207920fb84335fac5b2b06ed7b472ece9e", "nest_level": 1, "utc_datetime_str": "2014-06-12 03:02:23"}, {"distinguished": null, "controversiality": 0, "created_utc": 1402535044, "body": "So I should learn Assembly -&gt; Python -&gt; C -&gt; C++? Cheers for the info about the calling codes, will read up on that.", "downs": 0, "edited": false, "author": "taH_pagh_taHbe", "subreddit_id": "t5_2qrkp", "subreddit": "Malware", "score": 1, "removal_reason": null, "author_flair_text": null, "gilded": 0, "link_id": "t3_27x6xn", "parent_id": 27218670020, "archived": true, "id": "ci5ap4e", "author_flair_css_class": null, "score_hidden": false, "ups": 1, "retrieved_utc": 1434199937, "updated_utc": 1668794485, "body_sha1": "36847c042c4f03ea07695ab930d5a2eac426f121", "utc_datetime_str": "2014-06-12 01:04:04"}, {"author": "Fulrem", "subreddit_id": "t5_2qrkp", "score": 2, "subreddit": "Malware", "removal_reason": null, "author_flair_text": null, "gilded": 0, "link_id": "t3_27x6xn", "distinguished": null, "controversiality": 0, "created_utc": 1402534719, "body": "I always prefered C/C++ over Java but thats just a personal view, IDA is great for disassembling C/C++ &amp; while it can also disassemble Java I prefer to use a decompiler such as `jd-gui' for poking through a jar and its class files.\n\nAlso note if learning assembly: its good to get your head around calling conventions (stdcall vs. cdecl etc) [https://en.wikipedia.org/wiki/X86_calling_conventions] as well as the TIB and its underlying structures [https://en.wikipedia.org/wiki/Win32_Thread_Information_Block] as one of the first things you'll note in a windows compiled binary is the fs:[0] stack setup of the SEH.", "downs": 0, "edited": false, "author_flair_css_class": null, "score_hidden": false, "ups": 2, "parent_id": 27218642298, "archived": true, "id": "ci5ak78", "retrieved_utc": 1434199873, "updated_utc": 1668794485, "body_sha1": "05d3ab9ffe9fa027a3766370b89405698a14a7c9", "utc_datetime_str": "2014-06-12 00:58:39"}, {"author": "taH_pagh_taHbe", "subreddit": "Malware", "score": 1, "removal_reason": null, "subreddit_id": "t5_2qrkp", "author_flair_text": null, "gilded": 0, "link_id": "t3_27x6xn", "controversiality": 0, "distinguished": null, "body": "Cheers for the detailed reply. I'll definately look into that python book. What's your take on C/C++ in terms of priority to learn for analysis? I've heard that Java and C++ are quite similar so the leap wouldn't be that hard for me.", "created_utc": 1402533309, "downs": 0, "edited": false, "author_flair_css_class": null, "score_hidden": false, "ups": 1, "parent_id": 27218639838, "archived": true, "id": "ci59yt6", "retrieved_utc": 1434199592, "updated_utc": 1668794485, "body_sha1": "ada3273be06d7076e633084d4a448044ed692af5", "utc_datetime_str": "2014-06-12 00:35:09"}, {"distinguished": null, "controversiality": 0, "created_utc": 1402533181, "body": "Assembly, learn x86 then its an easy step to x86-64, then the others fall into place IA-64, SPARC, MIPS etc. I actually learnt SPARC back at university (and that its basically MIPS but in reverse order) then picked up x86 on the job. Python is great for helpful scripts to automate things or test PoC code, I highly recommend this book- \"Gray Hat Python: Python Programming for Hackers and Reverse Engineers\".\n\nMy take on malware analysis is you need a disassembler, a debugger, and a scripting language.\nDisassembler for static analysis - need to be able to read assembly, and programs such as IDA support plugins that can allow scripting with Python.\nDebugger for dynamic analysis (or when you hit a wall with static analysis -_- ) - recommend windbg, has its own scripting language.\nScripting language to support everything you do, I use a lot of python scripts for simple decoding of layered PHP scripts that are generally malicious as well as for resolving APIs in IDA (APIbyHash functions). Can be something straight forward like a small RC4 script in python for when you find that triple loop function as part of a bots obfuscation layer and just want to get to the guts of the malware rather than launching a debugger and dumping out the memory block.", "downs": 0, "edited": false, "author": "Fulrem", "subreddit_id": "t5_2qrkp", "removal_reason": null, "score": 5, "subreddit": "Malware", "gilded": 0, "author_flair_text": null, "link_id": "t3_27x6xn", "parent_id": null, "archived": true, "id": "ci59wwu", "author_flair_css_class": null, "score_hidden": false, "ups": 5, "retrieved_utc": 1434199567, "updated_utc": 1668794485, "body_sha1": "c604eb1ccb32eb29278273000fda419b978234fc", "nest_level": 1, "utc_datetime_str": "2014-06-12 00:33:01"}, {"link_id": "t3_27n88o", "gilded": 0, "author_flair_text": null, "removal_reason": null, "score": 2, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "author": "slipstream-", "edited": false, "downs": 0, "body": "&gt;MalwareMustDie's objective is to stop any individual or entities, legit or not, using malware with any kind of purposes. You use malware, you'll meet us eventually.\n\nInb4 you go after PUPs next. I and many individuals hate the scum who wrap others' software in custom installers using social engineering tricks to get users not in the know to install adware/spyware for their own profit. (I'm pointing at not just cnet and sourceforge but those who buy adwords too. At least google took a bunch of adware related 'download minecraft' ads down within 20 minutes of my reporting them...)\n\nHere's a small tip for when you do: there's [a very public forum](http://ppitalk.com) dedicated to the discussion of this sort of thing.. I laughed at the admin saying 'test your adware installers in virtualbox'. They should test them in their real pc and install all offered adware: do unto others as you would have them do to you.", "created_utc": 1402528496, "controversiality": 0, "distinguished": null, "ups": 2, "score_hidden": false, "author_flair_css_class": null, "id": "ci57yyl", "archived": true, "parent_id": 27217155163, "retrieved_utc": 1434198651, "updated_utc": 1668794484, "body_sha1": "d839ca86d6bc4db95e340a05beb524ee25c95c35", "utc_datetime_str": "2014-06-11 23:14:56"}, {"link_id": "t3_27vn4m", "author_flair_text": null, "gilded": 0, "subreddit": "Malware", "score": 2, "removal_reason": null, "subreddit_id": "t5_2qrkp", "author": "Websly", "edited": false, "downs": 0, "body": "PE infector and FTP stealer are upgrade features? What a ripoff :)", "created_utc": 1402520206, "controversiality": 0, "distinguished": null, "ups": 2, "score_hidden": false, "author_flair_css_class": null, "id": "ci545n8", "archived": true, "parent_id": null, "retrieved_utc": 1434196855, "updated_utc": 1668794481, "body_sha1": "e358ffa2e18eb11c50a8fac9d00f1ad140760f9e", "nest_level": 1, "utc_datetime_str": "2014-06-11 20:56:46"}, {"id": "ci4xlir", "parent_id": null, "distinguished": null, "body": "https://blogs.rsa.com/new-pandemiya-trojan-emerges-alternative-zeus-based-variants/", "ups": 2, "controversiality": 0, "edited": false, "created_utc": 1402507429, "subreddit_id": "t5_2qrkp", "archived": true, "downs": 0, "score": 2, "subreddit": "Malware", "removal_reason": null, "gilded": 0, "link_id": "t3_27vn4m", "author_flair_css_class": null, "author_flair_text": null, "score_hidden": false, "author": "N3mes1s", "retrieved_utc": 1434193698, "updated_utc": 1668794470, "body_sha1": "9baea36eaf3be260bb360a1f583389aec5e815a9", "nest_level": 1, "utc_datetime_str": "2014-06-11 17:23:49"}, {"downs": 0, "parent_id": null, "ups": 1, "body": "I know Google once did malware detection on their home page, it would be interesting if Google, Microsoft and other common portals coordinated a GOZ takedown day.", "score": 1, "author_flair_text": null, "link_id": "t3_27ut48", "subreddit_id": "t5_2qrkp", "subreddit": "Malware", "author_flair_css_class": null, "controversiality": 0, "id": "ci4ptlk", "distinguished": null, "archived": true, "score_hidden": false, "gilded": 0, "removal_reason": null, "created_utc": 1402487867, "edited": false, "author": "R-EDDIT", "retrieved_utc": 1434189968, "updated_utc": 1668794463, "body_sha1": "bf605e20b05ab019b00668d96f1e2c08e0b61a7e", "nest_level": 1, "utc_datetime_str": "2014-06-11 11:57:47"}, {"author_flair_text": null, "link_id": "t3_27ut48", "score": 1, "body": "Interesting approach.", "parent_id": null, "ups": 1, "downs": 0, "id": "ci4pa6g", "controversiality": 0, "author_flair_css_class": null, "subreddit": "Malware", "subreddit_id": "t5_2qrkp", "removal_reason": null, "score_hidden": false, "gilded": 0, "archived": true, "distinguished": null, "author": "flym4n", "edited": false, "created_utc": 1402485254, "retrieved_utc": 1434189713, "updated_utc": 1668794463, "body_sha1": "ac086dc742170fc2afea42182c9063473cd8e60b", "nest_level": 1, "utc_datetime_str": "2014-06-11 11:14:14"}], "error": null, "metadata": {"es": {"took": 70, "timed_out": false, "_shards": {"total": 824, "successful": 824, "skipped": 820, "failed": 0}, "hits": {"total": {"value": 10, "relation": "eq"}, "max_score": null}}, "es_query": {"size": 10, "query": {"bool": {"must": [{"bool": {"must": [{"range": {"created_utc": {"gte": 1402470060000}}}, {"range": {"created_utc": {"lt": 1402556460000}}}]}}, {"bool": {"should": [{"match": {"subreddit": "malware"}}], "minimum_should_match": 1}}]}}, "aggs": {}, "sort": {"created_utc": "desc"}}, "es_query2": "{\"size\":10,\"query\":{\"bool\":{\"must\":[{\"bool\":{\"must\":[{\"range\":{\"created_utc\":{\"gte\":1402470060000}}},{\"range\":{\"created_utc\":{\"lt\":1402556460000}}}]}},{\"bool\":{\"should\":[{\"match\":{\"subreddit\":\"malware\"}}],\"minimum_should_match\":1}}]}},\"aggs\":{},\"sort\":{\"created_utc\":\"desc\"}}", "api_launch_time": 1673017478.254743, "api_request_start": 1674102777.4120526, "api_request_end": 1674102777.529752, "api_total_time": 0.11769938468933105}}