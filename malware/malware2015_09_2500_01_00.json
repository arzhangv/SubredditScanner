{"data": [{"author_flair_css_class": null, "created_utc": 1443201701, "author": "mmd0xFF", "subreddit": "Malware", "ups": 1, "gilded": 0, "distinguished": null, "score": 1, "controversiality": 0, "author_flair_text": null, "subreddit_id": "t5_2qrkp", "parent_id": 28019164377, "body": "I don't think we can.. for the long term of mitigation, \nwe maybe can for the short term until the \"condition\" is changed (in malware and in NIX compilation/linking development).\n\nYour automation wish is bringing varied options in analysis of ELF and too many of it, since there are many new compilation techniques are developed too ..thus ELF itself is still improving, and this is the beauty of open source. Please remember too, unlike Windows, we have wide architecture to deal with, (like recent ELFs malware I encountered are sorted as per below) which make us have to deal with different way to deal in registers in each. i.e.: (the data is based on real statistic of what I analyzed..mostly chinese/irc ddoser &amp; several backdoor/downloaders)\n\nELF 32-bit LSB executable, MIPS, MIPS-I version 1 (SYSV and GNU/Linux)\nELF 32-bit MSB executable, MIPS, MIPS-I version 1 (SYSV and GNU/Linux)\nELF 32-bit LSB executable, Renesas SH, version 1 (SYSV and GNU/Linux)\nELF 32-bit LSB executable, Intel 80386, version 1 (SYSV and GNU/Linux)\nELF 64-bit LSB executable, x86-64, version 1 (SYSV and GNU/Linux)\nELF 32-bit LSB executable, ARM, version 1 (SYSV and GNU/Linux)\nELF 32-bit LSB executable, ARM, EABI4 version 1 (SYSV and GNU/Linux)\nELF 32-bit LSB executable, Intel 80386, version 1 (SYSV and GNU/Linux)\nELF 32-bit MSB executable, PowerPC or cisco 4500, version 1 (SYSV and GNU/Linux)\nELF 32-bit MSB executable, Motorola m68k, 68020, version 1 (SYSV and GNU/Linux)\nNote: there are minor versions on Sparc x64 and SH for x32 architectures but rare.\n\nSeeing the data above as NIX developer I know that the ELF malware actors is trying every emulation and cross compilers environment that they can grab to aim specific desired target (routers, servers, maybe next time my refrigerators or TV..lol)\n\nSorry to say that I love UNIX, what we should do is to understand the native of the OS handles to executable and mitigate it from there. Syscalls goes with it, you gotta get in to it. It is the only way I do since day 1 reversing them.\n\nThis is why sysadmins are rocks in handling NIX malware infection than antivirus solutions &lt; we all must thank them truly, they know the backyard much better than crooks, yet this is also why AV never put much priority to NIX malware because they know they can not handle it as per what they do with Windows. ", "id": "cvdy170", "edited": true, "link_id": "t3_3lsavd", "retrieved_utc": 1444578071, "updated_utc": 1668798777, "body_sha1": "bbda3ab3df25beac5ceefaf75df399a069d5f04b", "edited_on": 1443222691, "utc_datetime_str": "2015-09-25 17:21:41"}, {"created_utc": 1443199183, "subreddit": "Malware", "author": "aaSSfxxx", "author_flair_css_class": null, "distinguished": null, "score": 2, "ups": 2, "gilded": 0, "subreddit_id": "t5_2qrkp", "parent_id": null, "controversiality": 0, "author_flair_text": null, "link_id": "t3_3lsfy0", "body": "The sample is unprotected .NET assembly, you can decompile and analyze it yourself using ILSpy or Reflector.", "id": "cvdwdvr", "edited": false, "retrieved_utc": 1444577295, "updated_utc": 1668798776, "body_sha1": "3eeac513ac2ddbe4800c4cfd92a8b11908f87059", "nest_level": 1, "utc_datetime_str": "2015-09-25 16:39:43"}, {"controversiality": 0, "author_flair_text": null, "parent_id": 28017398942, "subreddit_id": "t5_2qrkp", "body": "I was only wondering if there were a more elegant solution which avoids reversing glibc and identify syscalls with the malware, or if someone succeded to have working glibc signature files to speed up reverse-engineering.", "id": "cvdvxll", "edited": false, "link_id": "t3_3lsavd", "author_flair_css_class": null, "created_utc": 1443198479, "author": "aaSSfxxx", "subreddit": "Malware", "ups": 2, "gilded": 0, "distinguished": null, "score": 2, "retrieved_utc": 1444577082, "updated_utc": 1668798776, "body_sha1": "92e84c199075285df9023b585f1bc49b1728e89b", "utc_datetime_str": "2015-09-25 16:27:59"}, {"distinguished": null, "score": 1, "ups": 1, "gilded": 0, "created_utc": 1443195605, "subreddit": "Malware", "author": "omfgwallhax", "author_flair_css_class": null, "link_id": "t3_3m9b3x", "id": "cvdu322", "body": "The article links to Kleissner who once again shows of his competence:  \n&gt;The file imports LoadLibraryA and GetProcAddress which makes it highly suspicious (those 2 API calls are commonly imported to resolve more API functions on demand, to hide the full list of API functions being used) and simple AV heuristics usually are able to catch that immediately.\n\nYes, those functions are used for that but they are also in the default Visual Studio initalization code.", "edited": false, "parent_id": null, "subreddit_id": "t5_2qrkp", "controversiality": 0, "author_flair_text": null, "retrieved_utc": 1444576210, "updated_utc": 1668798775, "body_sha1": "9f9e1ec52f8ed0487bafae2b4ae4fecb6e1565ab", "nest_level": 1, "utc_datetime_str": "2015-09-25 15:40:05"}], "error": null, "metadata": {"es": {"took": 74, "timed_out": false, "_shards": {"total": 824, "successful": 824, "skipped": 820, "failed": 0}, "hits": {"total": {"value": 4, "relation": "eq"}, "max_score": null}}, "es_query": {"size": 10, "query": {"bool": {"must": [{"bool": {"must": [{"range": {"created_utc": {"gte": 1443164460000}}}, {"range": {"created_utc": {"lt": 1443250860000}}}]}}, {"bool": {"should": [{"match": {"subreddit": "malware"}}], "minimum_should_match": 1}}]}}, "aggs": {}, "sort": {"created_utc": "desc"}}, "es_query2": "{\"size\":10,\"query\":{\"bool\":{\"must\":[{\"bool\":{\"must\":[{\"range\":{\"created_utc\":{\"gte\":1443164460000}}},{\"range\":{\"created_utc\":{\"lt\":1443250860000}}}]}},{\"bool\":{\"should\":[{\"match\":{\"subreddit\":\"malware\"}}],\"minimum_should_match\":1}}]}},\"aggs\":{},\"sort\":{\"created_utc\":\"desc\"}}", "api_launch_time": 1673017478.2578893, "api_request_start": 1674104033.144348, "api_request_end": 1674104033.2579007, "api_total_time": 0.11355280876159668}}