{"data": [{"controversiality": 0, "gilded": 0, "parent_id": 27942655772, "body": "Allegedly.", "subreddit": "Malware", "score": 3, "link_id": "t3_3h24w9", "id": "cu4nktu", "distinguished": null, "edited": false, "created_utc": 1439708319, "subreddit_id": "t5_2qrkp", "author_flair_css_class": null, "ups": 3, "author": "catcradle5", "author_flair_text": null, "retrieved_utc": 1441279321, "updated_utc": 1668797523, "body_sha1": "095ada77348f47f96487bbddca50797b327a78d2", "utc_datetime_str": "2015-08-16 06:58:39"}, {"author_flair_text": null, "author_flair_css_class": null, "subreddit_id": "t5_2qrkp", "created_utc": 1439704226, "ups": -1, "author": "tieluohan", "distinguished": null, "id": "cu4max0", "link_id": "t3_3h24w9", "score": -1, "subreddit": "Malware", "edited": false, "body": "Creating and spreading malware designed to wreck untold millions of computers worldwide (all MSE and AVG users) hardly seems the appropriate response?", "parent_id": 27942655772, "gilded": 0, "controversiality": 0, "retrieved_utc": 1441278655, "updated_utc": 1668797522, "body_sha1": "322e848ba33b7ac85766c879b9e9865cb64d3d6e", "utc_datetime_str": "2015-08-16 05:50:26"}, {"ups": 3, "author": "tieluohan", "author_flair_css_class": null, "subreddit_id": "t5_2qrkp", "created_utc": 1439702728, "author_flair_text": null, "body": "&gt; As I said, the process isn't fully automated.\n\nAh. This explains why you find it such a hard time believing the attack. The thing is, for quite some time most detections getting shipped to customers have never been even verified by human eyes, but really are fully automated. As an example, here's Eugene talking about [handling 70000 new samples per day in 2011](https://eugene.kaspersky.com/2011/10/28/number-of-the-month-70k-per-day/):\n\n&gt;Back in the day our anti-virus lab worked like a woodpecker! Like on a conveyor \u2013 we sat there and pecked away at viruses. Speaking of which, it was a very difficult, fatiguing, albeit respected profession \u2013 the dirty job that someone had to do. And guess who was the first woodpecker in the company? You guessed right: for too for many years I was pecking away daily!\n\n&gt;However, those days are long gone. With the current high-volume streams of malware we discover every day, to peck is just unrealistic and ineffective, or rather, simply daft.\n\n&gt;Already for years, as if on red-alert combat status\u2026 we\u2019ve been auto-woodpecking! For human input is left just the most intellectual work \u2013 examining the trickiest samples, investigating botnets and targeted attacks, and making sure that the auto-woodpeckers don\u2019t give any false positives, and of course, to train and develop these little helpers of ours.\n\nNaturally is the auto-woodpecker does full file hashes, then of course the only way to trick it would be the hash collision you suggest, and that would be indeed borderline impossible. However, if the automated detections are not full file hashes, then the attack I described should be plausible.\n\nEdit: I previosly linked the Virusbtn 2013 presentation about these attacks you deem impossible or unbelieable. You really should consider checking out the slides, but here's a part of the abstract:\n&gt;Hundreds of thousands of our customers were affected. Within eight hours, we corrected the FPs, released fixes, and launched a post-mortem to understand why our automated system failed.\n\n&gt;Simple answer: our automated systems had been attacked. One day before, our systems were poisoned with hundreds of crafted clean files containing fragments of our (and other AV vendor) detection patterns. Our automated systems were tricked into detecting clean files, and our customers suffered.\n\nhttps://www.virusbtn.com/conference/vb2013/abstracts/LM7-JiaBatchelder.xml", "parent_id": 27942674399, "gilded": 0, "controversiality": 0, "edited": true, "id": "cu4ls23", "distinguished": null, "link_id": "t3_3h24w9", "score": 3, "subreddit": "Malware", "retrieved_utc": 1441278408, "updated_utc": 1668797522, "body_sha1": "83b837b92f70edf600bf31f292371915247d0467", "edited_on": 1439704612, "utc_datetime_str": "2015-08-16 05:25:28"}, {"author_flair_text": null, "ups": 3, "author": "BlastedInTheFace", "subreddit_id": "t5_2qrkp", "author_flair_css_class": null, "created_utc": 1439697583, "edited": false, "link_id": "t3_3h24w9", "id": "cu4jqui", "distinguished": null, "subreddit": "Malware", "score": 3, "body": "&gt; You don't understand. Yes, it is certainly possible to craft a non-malicious file which a particular AV product would detect as such, if you have a good understanding of how the product works and its detection is sufficiently flawed and simple to fool. But that's not what a \"false positive\" means.\n&gt; \n&gt; \n&gt; \n&gt; A false positive means the AV product flagging as malicious a perfectly legitimate file that is already on other people's computers. Like, say, a Windows system file. You cannot do that, because you have no control over what is on other people's computers. Microsoft can do that. Kaspersky can do that for the files of his product. But Kaspersky cannot force a competing AV product to flag a file made by Microsoft, because Kaspersky has neither control over how that other AV product works, nor on what the contents of the files produced by Microsoft is.\n\nNot true. As soon as you create this file, and it is detected, it is, by definition, a false positive. It is irrelevant if this is in a lab, or in the wild. If I take that same file, and give it to a buddy, their system will treat the file the same way, all relevant things equal.\n\n&gt;And the competing AV wouldn't be \"causing false positives\" - it would be doing the perfectly proper job of locating, reporting and removing the now-damaged files.\n\nA/V's job by definition is not detection and reporting of modified files. It is again, the detection and reporting of malicious files. Also, modifying the code of existing files does not necessarily \"break\" them.", "controversiality": 0, "gilded": 0, "parent_id": 27941807301, "retrieved_utc": 1441277449, "updated_utc": 1668797519, "body_sha1": "a495419663e12c8ddaec775dba719d46f80e490e", "utc_datetime_str": "2015-08-16 03:59:43"}, {"body": "Dude... you should let them connect and make sure that something jumps to their network...", "parent_id": 27925936088, "gilded": 0, "controversiality": 0, "distinguished": null, "id": "cu4jhwt", "link_id": "t3_3g2b06", "score": 2, "subreddit": "Malware", "edited": false, "author_flair_css_class": null, "subreddit_id": "t5_2qrkp", "created_utc": 1439697002, "ups": 2, "author": "BlastedInTheFace", "author_flair_text": null, "retrieved_utc": 1441277333, "updated_utc": 1668797519, "body_sha1": "fbce8a8b4979cebd16abe33698a95a014f53b9c9", "utc_datetime_str": "2015-08-16 03:50:02"}, {"parent_id": 27942498893, "gilded": 0, "controversiality": 0, "body": "&gt; Usually there isn't a human even looking at most new malware samples, or even most detections that get shipped to the customers. Come on, that just hasn't been even remotely possible for almost a decade or so even with a ludicrously huge budget.\n\nActually, the relatively small company I used to work for was doing exactly that until a few years ago. Yes, a lot of the work *is* automated. If the thing is a virus, it would be replicated automatically to a bunch of different files with known contents. Then a tool would automatically examine the batch of files and would highlight where exactly the added code is and even where the variable areas in it are. It would assist the researchers by invoking the emulator and decrypt the virus, if it is encrypted. It would *propose* a simple detection entry. Another set of tools would check the entry for false positives in a huge database of known clean files. Other sets of tools are using for sieving the collections we receive - e.g., by eliminating files known to be non-malicious (which doesn't always mean \"legitimate\") or which we already have. Another tool is used to compute \"code similarity\" in order to assist us to classify the virus in the correct family and pick a correct name for it. But, in the end, there is always a human involved - it's automated, not automatic.\n\n&gt; As for the \"impossibility\" of reverse engineering a black box with vast troves of malware samples and matching detections automatically created by the black box, that just is anything but impossible. Especially when you consider that the attacker can feed the black box some handcrafted malware samples and later see the output.\n\nAs I said, the process isn't fully automated. You can make guesses of what the human would decide, but it's not reliable. And it's not as if the attacker has the black box at his disposition. He has to make a sample, feed it to VirusTotal, wait until the AV product receives a sample and implements detection (which can take a month or more, if it is not something with high urgency like a worm that has gone pandemic or a malware the press has written about), then guess why he isn't seeing detection (is it because the attack failed? Is it because the AV producer hasn't come around to implementing detection yet?) and so on.\n\n&gt; To give a simplified example, maybe you have a malicious sample, and you find out that the black box algorithm has decided to hash four blocks at specific offsets to detect it. What happens if you now change the content of those small blocks to match a Steam DLL and submit that sample to VT?\n\nSimple - the AV product stops detecting it and the malware stops working, so when the AV producer gets the sample from VT, they just classify it as \"yet another corrupted piece of crap\" and forget about it.\n\nLook, this simply isn't a realistic attack. A much better idea proposed in the other post - you take a small self-contained piece of malware (i.e., not a parasitic virus, for instance; just a worm or a Trojan) that the scanner is detecting by checksumming the whole thing and modify it in such a way, that it is still (working) malware but its checksum would be the same as the checksum of a known legitimate file of the same size (by exploiting a collision in the fast-but-insecure checksumming algorithm). That is, you don't modify malware by putting legitimate code inside, and you don't modify legitimate files by putting malware code inside - you just write malware from scratch that happens to have the same checksum (using a particular algorithm) as some legitimate file.\n\nHow practical is this? First, AV products don't use MD5 or anything \"established\" like this. They use fast and simple algorithms, which are not cryptographically secure and much easier to break by a cryptographer - but how many normal people know how to cause collisions even with something as simple as a CRC-32 without resorting to brute force?\n\nSecond, the malware has to be of such a kind as to warrant checksumming of the whole file. This means that it has to be relatively small and even then, many products use more than one checksum (e.g., ours would use one for the first 512 bytes to trigger the detection mechanism and then a different one for the whole file for identification purposes), so you'd have to spoof both.\n\nThird, you'd have to find a legitimate file of the same size (because checking the size is the first thing a scanner would do - even before starting to checksum anything), meaning that it would have to be small, so that the scanner would resort to a whole-file checksum...\n\nAnd doing that not for one but for *three different products* (that work differently), which is what Kaspersky is being accused of?\n\nNo, sorry. I still don't believe it.", "edited": false, "score": 0, "subreddit": "Malware", "distinguished": null, "id": "cu4chjz", "link_id": "t3_3h24w9", "author": "bontchev", "ups": 0, "created_utc": 1439682155, "author_flair_css_class": null, "subreddit_id": "t5_2qrkp", "author_flair_text": null, "retrieved_utc": 1441273997, "updated_utc": 1668797513, "body_sha1": "f8001a4861d7d80a2fb00b5a8a28d5ca1b53f1e0", "utc_datetime_str": "2015-08-15 23:42:35"}, {"gilded": 0, "parent_id": 27942513868, "controversiality": 0, "body": "In response to other vendors taking their efforts and giving nothing back.", "edited": false, "score": -4, "subreddit": "Malware", "id": "cu4c36k", "distinguished": null, "link_id": "t3_3h24w9", "author": "Synux", "ups": -4, "created_utc": 1439681319, "author_flair_css_class": null, "subreddit_id": "t5_2qrkp", "author_flair_text": null, "retrieved_utc": 1441273809, "updated_utc": 1668797512, "body_sha1": "48292d46e9d764f68189f720f5667436ba61b2ce", "utc_datetime_str": "2015-08-15 23:28:39"}, {"subreddit": "Malware", "score": 1, "link_id": "t3_3h24w9", "distinguished": null, "id": "cu4bhdd", "edited": false, "controversiality": 0, "gilded": 0, "parent_id": 27942337056, "body": "&gt; It was about MD5 hash collisions.\n\nI honestly refuse to believe this. Even if we leave aside that producing MD5 collisions isn't exactly trivial (it's just feasible enough to consider it cryptographically broken), which AV producer in their right mind would use such a slow and inefficient hash in their product?!\n\n&gt; A lot AV engines calculate a hash before starting something more CPU expensive like an PE emulation.\n\nNot on the whole goddamned file and the result doesn't mean screaming \"malware\"! For instance, for some kind of files ours would checkum (not MD5, ferkrissake) the first 512 bytes after the entry point. If the checksum doesn't match anything we know, it just means \"not a known file of this kind, no point scanning any further for the kind of malware that resides in such files\". What if we do get a match? It just means \"found something that might be suspicious, better start examining more seriously\". We certainly wouldn't report something as malicious just because we got a checksum match for the first 512 bytes. That's how we used scan strings too - not the way most people imagine scanners use scan strings to detect malware but just to tell the scanner \"there might be something fishy here, better start scanning seriously\". Not as a detection mechanism but as a trigger for the more serious (and slow) scanning and identification algorithms.\n\n&gt; Microsoft figured out that some people somehow managed to create md5 collisions with normal files and malware.\n\nLOL. They sure did but this wasn't some run-of-the-mill moron attacking a scanner to cause false positives. It was a government intelligence agency operation, using an unusual and not publicly known method to compute MD5 collisions, impersonate a Microsoft certificate that was based on this hash and masquerade as a Windows Update. They had to revoke all of their certificates that used MD5 and even shipped an update to IE in order to make it no longer trust such certificates from anyone, if I remember correctly.\n\nBut that's different.", "author_flair_text": null, "created_utc": 1439680026, "subreddit_id": "t5_2qrkp", "author_flair_css_class": null, "ups": 1, "author": "bontchev", "retrieved_utc": 1441273523, "updated_utc": 1668797512, "body_sha1": "081fb72a9f3783405af7ca39c45025698edbfa16", "utc_datetime_str": "2015-08-15 23:07:06"}, {"ups": 4, "author": "catcradle5", "created_utc": 1439675077, "subreddit_id": "t5_2qrkp", "author_flair_css_class": null, "author_flair_text": null, "controversiality": 0, "parent_id": 27942106762, "gilded": 0, "body": "They claim they were ordered to do so by Eugene Kaspersky.", "edited": false, "subreddit": "Malware", "score": 4, "link_id": "t3_3h24w9", "distinguished": null, "id": "cu491os", "retrieved_utc": 1441272323, "updated_utc": 1668797511, "body_sha1": "9686f61e117eabb8d0dfa98ed4a9138a9a351c1c", "utc_datetime_str": "2015-08-15 21:44:37"}, {"author_flair_text": null, "author": "tieluohan", "ups": 2, "created_utc": 1439674401, "subreddit_id": "t5_2qrkp", "author_flair_css_class": null, "edited": false, "subreddit": "Malware", "score": 2, "link_id": "t3_3h24w9", "id": "cu48q4t", "distinguished": null, "controversiality": 0, "parent_id": 27942307809, "gilded": 0, "body": "&gt; You cannot predict that. It's not in the AV product. By analyzing the product, you cannot determine reliably how its producer implements detections. ... Usually, there is a human picking a particular snippet from the malware. \n\nUsually there *isn't* a human even looking at most new malware samples, or  even most detections that get shipped to the customers. Come on, that just hasn't been even remotely possible for almost a decade or so even with a ludicrously huge budget.\n\nAs for the \"impossibility\" of reverse engineering a black box with vast troves of malware samples and matching detections automatically created by the black box, that just is anything but impossible. Especially when you consider that the attacker can feed the black box some handcrafted malware samples and later see the output. To give a simplified example, maybe you have a malicious sample, and you find out that the black box algorithm has decided to hash four blocks at specific offsets to detect it. What happens if you now change the content of those small blocks to match a Steam DLL and submit that sample to VT? Is it really that impossible that the same algorithm would work the same way again?", "retrieved_utc": 1441272171, "updated_utc": 1668797511, "body_sha1": "6b72c44618f99476ed5c3341e496c0acc207f513", "utc_datetime_str": "2015-08-15 21:33:21"}], "error": null, "metadata": {"es": {"took": 84, "timed_out": false, "_shards": {"total": 824, "successful": 824, "skipped": 820, "failed": 0}, "hits": {"total": {"value": 35, "relation": "eq"}, "max_score": null}}, "es_query": {"size": 10, "query": {"bool": {"must": [{"bool": {"must": [{"range": {"created_utc": {"gte": 1439622060000}}}, {"range": {"created_utc": {"lt": 1439708460000}}}]}}, {"bool": {"should": [{"match": {"subreddit": "malware"}}], "minimum_should_match": 1}}]}}, "aggs": {}, "sort": {"created_utc": "desc"}}, "es_query2": "{\"size\":10,\"query\":{\"bool\":{\"must\":[{\"bool\":{\"must\":[{\"range\":{\"created_utc\":{\"gte\":1439622060000}}},{\"range\":{\"created_utc\":{\"lt\":1439708460000}}}]}},{\"bool\":{\"should\":[{\"match\":{\"subreddit\":\"malware\"}}],\"minimum_should_match\":1}}]}},\"aggs\":{},\"sort\":{\"created_utc\":\"desc\"}}", "api_launch_time": 1673945683.810305, "api_request_start": 1674103923.3208904, "api_request_end": 1674103923.4438398, "api_total_time": 0.12294936180114746}}