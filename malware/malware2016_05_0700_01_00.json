{"data": [{"id": "d2x6wm0", "author_flair_text": null, "author": "stacksmasher", "ups": 2, "created_utc": 1462689038, "author_flair_css_class": null, "parent_id": null, "gilded": 0, "link_id": "t3_4ide0e", "stickied": false, "subreddit_id": "t5_2qrkp", "body": "I built a place called the \"Zoo\". Pretty much an environment that just goes out and farms malware. Its really easy to do. ", "controversiality": 0, "score": 2, "edited": false, "subreddit": "Malware", "distinguished": null, "retrieved_utc": 1465711239, "updated_utc": 1668783198, "body_sha1": "50dd64b16bc3bfe56da6f367bad3e2a0ae2423d6", "nest_level": 1, "utc_datetime_str": "2016-05-08 06:30:38"}, {"id": "d2x6snv", "author": "exosphere5", "author_flair_text": null, "ups": 5, "parent_id": 28474822696, "author_flair_css_class": null, "created_utc": 1462688715, "link_id": "t3_4ide0e", "gilded": 0, "stickied": false, "subreddit_id": "t5_2qrkp", "body": "Thanks!\n\nAlso, how do I determine if a site is malicious?  For simple malware that might be easy -- if the URL trips my antivirus or downloads virus.exe I know it's bad -- but what if the site is serving particularly advanced malware that attempts to avoid analysis?  Due to the rapidly varying nature of processes in most browsers, I can't use the fact that the new URL generated a new process or thread to determine that it is malicious.\n\nFor example, new chrome.exe processes are started and stopped periodically even when the browser is idle, every tab has its own process, new URLs seem to generate new processes (when I go from, say, reddit.com to cnn.com a new chrome.exe process is created and the old one is deleted, and the same thing happens when I go from cnn.com back to reddit.com), every plugin gets its own process, and each site seems to create an arbitrary number of threads in its process (for example, reddit.com/r/Malware creates 16 threads in its chrome.exe process and cnn.com creates 24).\n\nSo I can't use the creation of a new process or the fact that there are a certain number of threads inside a process to determine that a site is malicious, and if the malware is memory-resident I can't use the fact that a file was dropped to determine maliciousness, since no file was dropped.  So how do I know that totallynotadrivebysite.com is malicious?\n\nI know that Google and other organizations maintain a list of URL blacklists, so they must have some method of automatically determining if a site is malicious.  How do they figure out if such-and-such a site is an \"attack site\" and should be added to a blacklist?  Is there any particular action to look for, or do I just use wget to get a copy of the URL's actual html file and open that in Cuckoo?", "controversiality": 0, "score": 5, "distinguished": null, "edited": false, "subreddit": "Malware", "retrieved_utc": 1465711187, "updated_utc": 1668783198, "body_sha1": "a9d43a473b1699025f401f8a4641dcc1e6a7c23a", "utc_datetime_str": "2016-05-08 06:25:15"}, {"parent_id": null, "created_utc": 1462687188, "author_flair_css_class": null, "gilded": 0, "link_id": "t3_4ide0e", "ups": 14, "id": "d2x69t4", "author": "Rokhmal112358", "author_flair_text": null, "score": 14, "distinguished": null, "subreddit": "Malware", "edited": false, "controversiality": 0, "subreddit_id": "t5_2qrkp", "body": "TLDR - create your own sandbox before you play with any malware. Play with suspicious links in spam emails, click shady ads, capture traffic in Wireshark, extract the files.\n\nYou ever get any of those spam emails? There's some that have attachments and some that have just text with links. If you have any of those available, that may be an easy way to get some in-the-wild \"active\" malware. There's, of course, a right way and a wrong way to extract the malware from those emails. The right way would be to create a new \"fake\" email account, forward the suspicious emails to the fake email (or just wait for that email address to have some sent to it) and open the email in a sandbox. You can set up your own, free sandbox with VirtualBox and an Ubuntu Linux ISO. Make sure you take a snapshot of the sandbox in a clean state before you handle any malware. \n\nAnother method: from your sandbox, run Wireshark (free) which is a network traffic analyzer while you click on suspicious links, look for executables or scripts being downloaded from an external IP or domain to your sandbox's IP. There's a way to extract those files from wireshark.\n\nYou can also download malware from any number of websites. I'm a tad tipsy and on my phone so please forgive my imperfect memory:\n\nContagio \n\nMalwr.com (with free account)\n\nVirusshare (with invite)\n\nVirustotal.com (with paid account) \n", "stickied": false, "retrieved_utc": 1465710941, "updated_utc": 1668783197, "body_sha1": "5a008accc7c1f8c68fe5ff58f4abd8cd73ffdfe6", "nest_level": 1, "utc_datetime_str": "2016-05-08 05:59:48"}, {"subreddit_id": "t5_2qrkp", "body": "Yeah, I looked at that document.  But the only mitigation it mentioned was preventing malware from seeing the VMWare guest-to-host communications channel.  It didn't focus on mitigating any of the other detection methods, and while I've seen some methods of preventing the simpler detection methods presented (looking for VM-specific files or registry keys, which can be fixed by renaming files, as you mentioned), I can't find any way to mitigate the more advanced anti-VM detection methods (looking for specific table locations in memory or timing attacks).  In fact, the document /u/SummerOf_69 provided indicated that there *is* no way to stop attacks involving discrepancies in table location in guest VM memory vs host memory, as these tables apparently have to be located in different locations on the guest and the host in order for the VM to be functional.\n\nAlso, the anti-VM detection techniques you linked to don't include any methods for detecting such advanced VM-detection routines.  They seem to focus on detecting suspicious queries of system data (i.e. why is chr0me.exe trying to find the current BIOS version and IDE controller ID?), and none of them have anything to do with memory- or timing-based detection methods.\n\nSo will I just have to accept that I won't always be able to force malware to execute in the VM, or is there some equally ingenious anti-anti-VM detection technique to beat all of the ingenious anti-VM techniques out there (at least the ones that don't rely on bugs)?\n\nAnd assuming I can't detonate a particular piece of malware in a VM, is there any way to tell that the malware isn't executing some part of its code due to it detecting it is in a VM so that the sample can be forwarded for further manual analysis?  I know that the link you provided to the Cuckoo github page has some anti-VM behavioral signatures, but they all rely on specific anti-VM methods -- querying strange system data etc.  Is there any generic way to determine \"this program isn't executing all of its code and is therefore flagged for manual analysis\" without being able to determine the exact behavior the program exhibited to detect it is in a VM?\n\nAgain, what do \"the professionals\" (AV companies etc) do when a piece of malware detects it is in a VM and doesn't execute, assuming the malware didn't also trigger some anti-VM behavioral detection signature that flagged it as suspicious?  Do they just not realize it is malware and forget about it, or is there any method they have of determining that it is suspicious so that it can be investigated further?  And if so, is there any way I as an individual can replicate those techniques (unfortunately, I don't have access to all the resources that a professional security company does)?\n\nAnd I know that manual analysis is the only surefire way to determine exactly what a program does, but it is simply infeasible for me to manually crawl every website on the internet looking for malicious sites and manually reverse engineer what all of them do.  So I was thinking of focusing on using automated analysis to discover software that likely is malicious, then analyzing that software manually.\n\nSo basically I'd like to use automated analysis as a method of narrowing my investigation from \"every website and executable file on the Internet\" to \"this smaller set of suspected malicious files.\"  I'm not sure if there's any way to do that besides sandbox/VM detection, but that's what I'm focusing on.", "stickied": false, "distinguished": null, "subreddit": "Malware", "edited": true, "score": 2, "controversiality": 0, "author": "exosphere5", "author_flair_text": null, "id": "d2wtdt4", "gilded": 0, "link_id": "t3_4ib341", "parent_id": 28474157824, "author_flair_css_class": null, "created_utc": 1462660711, "ups": 2, "retrieved_utc": 1465704783, "updated_utc": 1668783186, "body_sha1": "10df0162cafc458a406d6fd7de713fa2393675b5", "edited_on": 1462660953, "utc_datetime_str": "2016-05-07 22:38:31"}, {"edited": true, "subreddit": "Malware", "distinguished": null, "score": 3, "controversiality": 0, "subreddit_id": "t5_2qrkp", "body": "Of course, an ingenious malware writer could always find some new tricks to bypass anti-vmdetection mechanisms and detect virtual environments. The limitations are only the imagination and the resources the malware creator has. But for 90% of the malware, the document provided by [/u/SummerOf_69](https://www.reddit.com/u/SummerOf_69) covers the vm detection tricks. You can check [cuckoo repository](https://github.com/cuckoosandbox/community/tree/master/modules/signatures/windows), as well, for \"behavioral signatures\" on anti-vm; search for \"antisandbox\" and \"antivm\".\n\n\nCompanies with enough resources can build their own custom infrastructure for malware analysis, hardware devices for real machines that snapshot memory, cpu, etc and even record at hardware level the execution of a sample, instruction by instruction.  Of course, these are expensive and used for binaries that are either suspicious and cannot be processed by vm systems or are found inside critical systems (banks, factories, big companies, etc). Usually, AVs flag files that have anti-vm techniques from the start.\n\n\nFrom my point of view, there is no solution to guarantee that all(100%) malware samples will run in a virtual environment.\n\n\nLE. The presence of virtual machine is one of the aspects; consider there is malware that checks and has behavior rules based on other criteria, like geolocation, IP, computer's hardware characteristics, OS language, connected devices, etc. So, in the end, manual analysis gives the best report on a binary's behavior. ", "stickied": false, "gilded": 0, "link_id": "t3_4ib341", "created_utc": 1462658219, "author_flair_css_class": null, "parent_id": 28474056904, "ups": 3, "author_flair_text": null, "author": "pardaillans", "id": "d2ws0sg", "retrieved_utc": 1465704142, "updated_utc": 1668783183, "body_sha1": "1cf8d9e00f54daa215a3ae778bcb1f92f198af44", "edited_on": 1462658776, "utc_datetime_str": "2016-05-07 21:56:59"}, {"ups": 4, "link_id": "t3_4ib341", "gilded": 0, "created_utc": 1462654243, "author_flair_css_class": null, "parent_id": 28474002177, "author_flair_text": null, "author": "exosphere5", "id": "d2wpux4", "controversiality": 0, "edited": false, "subreddit": "Malware", "distinguished": null, "score": 4, "stickied": false, "subreddit_id": "t5_2qrkp", "body": "So essentially what you and /u/SummerOf_69 are saying is that I should just rename files/drivers that give away the presence of a virtual machine?  Or, in the case of your first example, create a single-process rootkit to modify its analysis of the system it's running on?\n\nWhat about more advanced malware?  Couldn't it just compute a checksum of its memory image to determine that it's been hooked if I use method (1)?  And as for modifying telling file/process/driver names, isn't it possible for programs to determine that they're running in a VM simply by looking at timing variances in certain CPU instructions, bypassing simple anti-detection methods like renaming VM files?\n\nI know these techniques are likely only going to be used on the more advanced samples, and that even they could be bypassed by manually reversing the malware to remove the anti-VM/anti-sandbox checks, but since I'm interested in finding those advanced samples (I just feel that analyzing the latest botnet software would be more interesting than looking at the latest adware crap) and because I need to make the analysis automated due to speed constraints, is there any way to automatically force advanced malware that uses tactics like timing analysis to detonate in a sandbox/VM without resorting to manual means?\n\nWhat about the professional security/AV companies like F-Secure and FireEye?  How do they analyze malware that refuses to execute in their sandboxes?  Is there any way for an individual to replicate their methods?", "retrieved_utc": 1465703071, "updated_utc": 1668783181, "body_sha1": "7151f8433bf57b6f83bd7eec682d578f390cf32c", "utc_datetime_str": "2016-05-07 20:50:43"}, {"id": "d2woucx", "author_flair_text": null, "author": "gotya_good", "ups": 4, "created_utc": 1462652388, "author_flair_css_class": null, "parent_id": null, "gilded": 0, "link_id": "t3_4ib341", "stickied": false, "subreddit_id": "t5_2qrkp", "body": "An alternative option would be not to use a virtual machine. E.g. VDI or remote desktop. Windows has the option to load images over the network. The advantage of these options is that most malware does not check for those environments.", "controversiality": 0, "score": 4, "subreddit": "Malware", "edited": false, "distinguished": null, "retrieved_utc": 1465702592, "updated_utc": 1668783180, "body_sha1": "4f5e9d71d85dbb12a515c209e833a7da6a860f6a", "nest_level": 1, "utc_datetime_str": "2016-05-07 20:19:48"}, {"ups": 6, "link_id": "t3_4ib341", "gilded": 0, "parent_id": null, "author_flair_css_class": null, "created_utc": 1462652106, "author": "pardaillans", "author_flair_text": null, "id": "d2wooox", "controversiality": 0, "distinguished": null, "edited": false, "subreddit": "Malware", "score": 6, "stickied": false, "subreddit_id": "t5_2qrkp", "body": "There are two good methods that I know to be most reliable:\n\n1) you create an application that injects into newly, unknown spawned \nprocesses inside vm, intercepts all api calls and modifies api responses to avoid detecting driver names, vm processes or vm files\n\n2) modify the [source code of virtualbox](https://www.virtualbox.org/browser/vbox/trunk)(or other virtual environment) and create your own custom build with modified driver names, virtual device names, addresses, etc. - none that resembles the original build.", "retrieved_utc": 1465702519, "updated_utc": 1668783180, "body_sha1": "8c76cb06386ab500e0b88be44b45e1ba25284bf8", "nest_level": 1, "utc_datetime_str": "2016-05-07 20:15:06"}, {"subreddit_id": "t5_2qrkp", "body": "You can modify some popular VM config files that malware often checks for VM detection: http://handlers.sans.org/tliston/ThwartingVMDetection_Liston_Skoudis.pdf", "stickied": false, "score": 7, "distinguished": null, "subreddit": "Malware", "edited": false, "controversiality": 0, "id": "d2wo5y2", "author": "SummerOf_69", "author_flair_text": null, "parent_id": null, "created_utc": 1462651153, "author_flair_css_class": null, "link_id": "t3_4ib341", "gilded": 0, "ups": 7, "retrieved_utc": 1465702273, "updated_utc": 1668783179, "body_sha1": "e0a9711d78a12c6379e5a45cd0b2aa830266bc19", "nest_level": 1, "utc_datetime_str": "2016-05-07 19:59:13"}, {"subreddit_id": "t5_2qrkp", "body": "Not that new and already decrypted :)\n\nhttp://www.bleepingcomputer.com/news/security/decrypted-alpha-ransomware-accepts-itunes-gift-cards-as-payment/", "stickied": false, "subreddit": "Malware", "edited": false, "distinguished": null, "score": 3, "controversiality": 0, "author_flair_text": null, "author": "lawrenceabrams", "id": "d2wh6dk", "link_id": "t3_4iafs7", "gilded": 0, "author_flair_css_class": null, "created_utc": 1462639011, "parent_id": null, "ups": 3, "retrieved_utc": 1465698883, "updated_utc": 1668783174, "body_sha1": "256715d5ba5d7d21a1906487fdd4a8654b3cfe98", "nest_level": 1, "utc_datetime_str": "2016-05-07 16:36:51"}], "error": null, "metadata": {"es": {"took": 75, "timed_out": false, "_shards": {"total": 824, "successful": 824, "skipped": 820, "failed": 0}, "hits": {"total": {"value": 16, "relation": "eq"}, "max_score": null}}, "es_query": {"size": 10, "query": {"bool": {"must": [{"bool": {"must": [{"range": {"created_utc": {"gte": 1462604460000}}}, {"range": {"created_utc": {"lt": 1462690860000}}}]}}, {"bool": {"should": [{"match": {"subreddit": "malware"}}], "minimum_should_match": 1}}]}}, "aggs": {}, "sort": {"created_utc": "desc"}}, "es_query2": "{\"size\":10,\"query\":{\"bool\":{\"must\":[{\"bool\":{\"must\":[{\"range\":{\"created_utc\":{\"gte\":1462604460000}}},{\"range\":{\"created_utc\":{\"lt\":1462690860000}}}]}},{\"bool\":{\"should\":[{\"match\":{\"subreddit\":\"malware\"}}],\"minimum_should_match\":1}}]}},\"aggs\":{},\"sort\":{\"created_utc\":\"desc\"}}", "api_launch_time": 1673017478.2171538, "api_request_start": 1674104627.2436903, "api_request_end": 1674104627.3611357, "api_total_time": 0.11744546890258789}}